{"version":3,"sources":["components/Footer/Footer.jsx","components/Header/Header.jsx","components/List/List.jsx","services/api.js","components/ModalComponent/ModalComponent.jsx","components/MainSection/MainSection.jsx","components/App/App.jsx","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","href","Component","Header","id","List","_this","this","props","personajes","map","personaje","onClick","select","key","src","thumbnail","path","extension","alt","name","api","getData","axios","get","ModalComponent","_this$props","selected","close","description","comics","items","item","resourceURI","series","urls","url","target","rel","React","MainSection","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","open","setState","_this2","then","res","data","results","catch","error","console","_this$state","components_ModalComponent_ModalComponent","unselect","bind","components_List_List","App","components_Header_Header","components_MainSection_MainSection","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f24c3ec7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './footer.scss';\n\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className=\"footer\">\n                <p className=\"footer__developer\">Developed by: <a href=\"https://github.com/qui-per32\">qui-per32</a></p>\n            </footer>\n        )\n    };\n}\n\nexport default Footer;","import React, {Component} from 'react';\nimport './header.scss';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header id=\"header\" className=\"header\">\n                <h1 className=\"header__title\">React Api Marvel</h1>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './list.scss';\n\nclass List extends Component {\n\n    render() {\n        return (\n            <div className=\"list\">\n                {this.props.personajes.map(personaje => {\n\n                    return (\n                        <div className=\"ListItem\" onClick={() => this.props.select(personaje)} key={personaje.id}>\n\n\n                            <img src={\n                                personaje.thumbnail.path + '/landscape_large.' + personaje.thumbnail.extension\n                            }\n                                alt=\"heroes\" />\n                            <div className=\"TitleItem\">\n                                {personaje.name}\n                            </div>\n                        </div>\n                    )\n                }\n                )};\n            </div>\n        )\n    }\n}\n\nexport default List;","import axios from 'axios';\n\nconst api = {\n    getData: () => axios.get('https://gateway.marvel.com:443/v1/public/characters?orderBy=name&limit=20&apikey=e125865efb994f843965340cf7a53669&ts=9&hash=ad725490698ef5de174244ecbeb08aa8')\n};\n\nexport default api;","import React from 'react';\nimport './modalComponent.scss';\n\nclass ModalComponent extends React.Component {\n\n    render() {\n        let { selected, close } = this.props;\n        return (\n            <div className=\"Modal\">\n                {\n                    this.props.selected ?\n                        <div onClick={close} className=\"positionModal\">\n\n                            <div className=\"Description\">Name</div>\n                            <div className=\"ListModal\">\n                                {selected.name}\n                            </div>\n                            <div className=\"Description\">Description</div>\n                            <div className=\"ListModal\">\n                                {selected.description}\n                            </div>\n                            <div className=\"Title\">Comics</div>\n                            {\n                                selected.comics.items.map(item => <div className=\"ListModal\" key={item.resourceURI}> {item.name}</div>)\n                            }\n                            <div className=\"Title\">Series</div>\n                            {\n                                selected.series.items.map(item => <div className=\"ListModal\" key={item.resourceURI}> {item.name}</div>)\n                            }\n                            <div className=\"Title\">More Informati√≥n</div>\n                            <div className=\"ListModal\"><a className=\"Link\" href={selected.urls[0].url} target='_blank' rel=\"noopener noreferrer\"> Hero Detail</a></div>\n                        </div>\n                        :\n                        ''\n                }\n            </div>\n\n        )\n    }\n}\n\nexport default ModalComponent;","import React, {Component} from 'react';\nimport List from '../List/List.jsx';\nimport api from '../../services/api';\nimport './mainSection.scss';\nimport ModalComponent from '../ModalComponent/ModalComponent.jsx';\n\nclass MainSection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      personajes: [],\n       open: false,\n       selected: null,\n    };\n  }\n  select(personaje){\n     this.setState({selected: personaje});\n  }\n\n  unselect() {\n    this.setState({ selected: null });\n  }\n\n  componentDidMount() {\n      api.getData()\n      .then((res)=>{      \n         this.setState({\n           personajes: res.data.data.results});  \n      }\n      )\n      .catch(error => console.error(error));\n  }\n\n  render() {\n    const {personajes, selected} = this.state;\n    return (\n      <section className=\"main\">\n        <ModalComponent selected={selected} close={this.unselect.bind(this)}/>\n        <List personajes={personajes} select={this.select.bind(this)}/>\n      </section>\n    );\n  }\n} \n\nexport default MainSection;","import React, { Component } from 'react';\nimport './App.scss';\nimport Footer from '../Footer/Footer.jsx';\nimport Header from '../Header/Header.jsx';\nimport MainSection from '../MainSection/MainSection.jsx';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <MainSection />\n        <Footer />\n      </div>\n    )\n  };\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}